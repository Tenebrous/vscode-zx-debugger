ROM_0 0000h rom_start
ROM_0 0000h restart
ROM_0 0000h start                 ; cold start restart
ROM_0 0008h error_1               ; the 'error' restart
ROM_0 0010h print_a_1             ; the 'print a character' restart (char in A)
ROM_0 0018h get_char              ; the 'collect character' restart
ROM_0 001ch test_char             ; Skip-over tests if character is relevant
ROM_0 0020h next_char             ; the 'collect next character' restart
ROM_0 0028h fp_calc               ; the 'calculator' restart
ROM_0 0030h bc_spaces             ; the 'make BC spaces' restart
ROM_0 0038h mask_int              ; the 'maskable interrupt' routine
ROM_0 0048h key_int               ; read and decode keyboard
ROM_0 0053h error_2               ; the 'error-2' routine (continuation of rst 8 routine)
ROM_0 0055h error_3
ROM_0 0066h nmi                   ; the 'non-maskable interrupt' (NMI) routine
ROM_0 0066h reset
ROM_0 0070h no_reset
ROM_0 0074h ch_add_plus_1         ; the 'ch-add+1' subroutine (called from rst 20)
ROM_0 0077h temp_ptr1
ROM_0 0078h temp_ptr2
ROM_0 007dh skip_over             ; the 'skip-over' subroutine (skipping white-spaces)
ROM_0 0090h skips
ROM_0 0095h token_table           ; tokenized characters 134d (RND) ..255d (COPY)
ROM_0 0205h main_keys             ; maps for the 39 keys L-mode and Caps Shift
ROM_0 022ch ext_unshift           ; 26 extended mode keys, letter keys and unshifted
ROM_0 0246h ext_shift             ; 26 extended mode keys, letter keys and shifted
ROM_0 0260h ctl_codes             ; 10 control codes, digit keys and Caps Shift
ROM_0 026ah sym_codes             ; 26 symbol codes, letter keys and Symbol Shift
ROM_0 0284h ext_digits            ; 10 extended mode keys, digit keys and Symbol Shift
ROM_0 028eh key_scan              ; the 'keyboard scanning' subroutine (result in DE)
ROM_0 0296h key_line              ; eight passes loop
ROM_0 029fh key_3keys
ROM_0 02a1h key_bits
ROM_0 02abh key_done
ROM_0 02bfh keyboard              ; the 'keyboard' subroutine (called from interrupt 50 times per second)
ROM_0 02c6h k_st_loop
ROM_0 02d1h k_ch_set
ROM_0 02f1h k_new                 ; new key is to be accepted
ROM_0 0308h k_end
ROM_0 0310h k_repeat              ; the 'repeating key' subroutine (occurs after REPDEL period)
ROM_0 031eh k_test                ; the 'k-test' subroutine
ROM_0 032ch k_main
ROM_0 0333h k_decode              ; the 'keyboard decoding' subroutine (main code in E, shift byte in B)
ROM_0 0341h k_e_let               ; letter keys in extended mode
ROM_0 034ah k_lookup              ; look-ups key tables b-f
ROM_0 034fh k_klc_let             ; letter keys in K, L or C modes
ROM_0 0364h k_tokens              ; adds A5 to produce token code
ROM_0 0367h k_digit               ; digit keys, space & enter, both shifts
ROM_0 0382h k_8_and_9             ; 8 and 9 key getting BRIGHT/FLASH codes
ROM_0 0389h k_gra_dgt             ; graphics mode with digits
ROM_0 039dh k_klc_dgt             ; digit keys in K, L and C modes
ROM_0 03b2h k_@_char              ; handling the @ char
ROM_0 03b5h beeper                ; the 'beeper' subroutine
ROM_0 03d1h be_ix_3
ROM_0 03d2h be_ix_2
ROM_0 03d3h be_ix_1
ROM_0 03d4h be_ix_0
ROM_0 03d6h be_h_and_l_lp
ROM_0 03f2h be_again
ROM_0 03f6h be_end
ROM_0 03f8h beep                  ; the 'BEEP' command routine
ROM_0 0425h be_i_ok               ; correct frequ for the 'pitch' i
ROM_0 0427h be_octave
ROM_0 046ch report_b              ; report B - integer out of range
ROM_0 046eh semi_tones            ; the 'semi-tone' table
ROM_0 04aah prog_name_zx81        ; program name subroutine of ZX81
ROM_0 04c2h sa_bytes              ; the 'sa-bytes' subroutine (SAVE header and code)
ROM_0 04d0h sa_flag
ROM_0 04d8h sa_leader             ; produce an edge (red to cyan)
ROM_0 04eah sa_sync_1             ; produce a sync pulse
ROM_0 04f2h sa_sync_2
ROM_0 04feh sa_loop               ; the SAVEing loop
ROM_0 0505h sa_loop_p
ROM_0 0507h sa_start
ROM_0 050eh sa_parity             ; sends the parity byte (in L)
ROM_0 0511h sa_bit_2              ; produces pulses
ROM_0 0514h sa_bit_1
ROM_0 051ah sa_set
ROM_0 051ch sa_out
ROM_0 0525h sa_8_bits             ; 8-bit-loop
ROM_0 053ch sa_delay              ; time delay
ROM_0 053fh sa_ld_ret             ; the 'sa/ld-ret' subroutine
ROM_0 0552h report_d              ; report D - BREAK-CONT repeats
ROM_0 0554h sa_ld_end
ROM_0 0556h ld_bytes              ; the 'ld-bytes' subroutine (loads from cassette)
ROM_0 056bh ld_break
ROM_0 056ch ld_start
ROM_0 0574h ld_wait               ; waits a while
ROM_0 0580h ld_leader             ; accepts a leader signal only
ROM_0 058fh ld_sync               ; off and on parts of the sync pulse
ROM_0 05a9h ld_loop               ; loads the data
ROM_0 05b3h ld_flag
ROM_0 05bdh ld_verify             ; verifies the loaded byte
ROM_0 05c2h ld_next               ; next byte
ROM_0 05c4h ld_dec
ROM_0 05c8h ld_marker
ROM_0 05cah ld_8_bits             ; build up a byte in L
ROM_0 05e3h ld_edge2              ; the 'ld-edge-2' and 'ld-edge-1' subroutines
ROM_0 05e7h ld_edge1
ROM_0 05e9h ld_delay
ROM_0 05edh ld_sample
ROM_0 0605h save_etc              ; the 'SAVE, LOAD, VERIFY & MERGE' command routines
ROM_0 0621h sa_space
ROM_0 0629h sa_blank
ROM_0 0642h report_f              ; report F - invalid file name
ROM_0 0644h sa_null               ; handle the name of program
ROM_0 064bh sa_name               ; transfers name to workspace
ROM_0 0652h sa_data               ; different parameters after command
ROM_0 0620h report_2              ; report 2 - variable not found
ROM_0 0672h sa_v_old              ; handling an existing array
ROM_0 0685h sa_v_new              ; handling old and new arrays
ROM_0 068fh sa_v_type
ROM_0 0692h sa_data_1
ROM_0 06a0h sa_scr                ; handling SCREEN$
ROM_0 06c3h sa_code               ; handling CODE
ROM_0 06e1h sa_code_1             ; look for starting address
ROM_0 06f0h sa_code_2
ROM_0 06f5h sa_code_3             ; fetching the length, if specified
ROM_0 06f9h sa_code_4             ; store parameters in the workspace
ROM_0 0710h sa_type_3             ; SCREEN$ and CODE type
ROM_0 0716h sa_line               ; LINE parameter
ROM_0 0723h sa_line_1             ; line number that follows LINE
ROM_0 073ah sa_type_0             ; LINE and no params = type 0
ROM_0 075ah sa_all                ; separates SAVE fom LOAD, VERIFY and MERGE
ROM_0 0767h ld_look_h             ; loop that is left when a header has been loaded
ROM_0 078ah ld_type               ; type checking and output message 'program', 'number array', etc.
ROM_0 07a6h ld_name               ; print new name loop
ROM_0 07adh ld_ch_pr
ROM_0 07cbh vr_contrl             ; the 'VERIFY' control routine
ROM_0 07e9h vr_cont_1             ; destination pointer
ROM_0 07f4h vr_cont_2
ROM_0 0800h vr_cont_3
ROM_0 0802h ld_block              ; the 'load a data block' subroutine
ROM_0 0806h report_r              ; report R - Tape loading error
ROM_0 0808h ld_contrl             ; the 'LOAD' control routine
ROM_0 0819h ld_cont_1             ; checking enough room
ROM_0 0825h ld_cont_2             ; test for room
ROM_0 082eh ld_data               ; loading of arrays
ROM_0 084ch ld_data_1             ; make space for the new array
ROM_0 0873h ld_prog               ; loading a Basic program+variables
ROM_0 08adh ld_prog_1             ; data block can be loaded
ROM_0 08b6h me_contrl             ; the 'MERGE' control routine
ROM_0 08d2h me_new_lp             ; loop with the lines of new program
ROM_0 08d7h me_old_lp             ; inner loop with lines of old program
ROM_0 08dfh me_old_l1
ROM_0 08ebh me_new_l2
ROM_0 08f0h me_var_lp             ; merging variables
ROM_0 08f9h me_old_vp             ; inner loop to search existing variables area
ROM_0 0901h me_old_v1
ROM_0 0909h me_old_v2             ; old and new variables match
ROM_0 0912h me_old_v3             ; loop for comparing letters of long names
ROM_0 091eh me_old_v4
ROM_0 0921h me_var_l1             ; match was found
ROM_0 0923h me_var_l2             ; match was not found
ROM_0 092ch me_enter              ; the 'MERGE a line or a variable' subroutine
ROM_0 093eh me_ent_1              ; the new entry can be made
ROM_0 0955h me_ent_2
ROM_0 0958h me_ent_3
ROM_0 0970h sa_contrl             ; the 'SAVE' control routine
ROM_0 0991h sa_1_sec              ; delay and save program/data
ROM_0 09a1h cass_messages         ; the cassette messages
ROM_0 09f4h print_out             ; the 'PRINT-out' routines
ROM_0 0a11h ctrl_ch_table         ; the 'control character' table
ROM_0 0a23h po_back_1             ; the 'cursor left' subroutine
ROM_0 0a38h po_back_2
ROM_0 0a3ah po_back_3
ROM_0 0a3dh po_right              ; the 'cursor right' subroutine
ROM_0 0a4fh po_enter              ; the 'carriage return' subroutine
ROM_0 0a5fh po_comma              ; the 'PRINT comma' subroutine
ROM_0 0a69h po_quest              ; the 'PRINT a question mark' subroutine
ROM_0 0a6dh po_tv_2               ; the 'control characters with operands' routine
ROM_0 0a75h po_2_oper             ; handling AT & TAB
ROM_0 0a7ah po_1_oper             ; handling colour items INK to OVER
ROM_0 0a7dh po_tv_1
ROM_0 0a80h po_change             ; current output routine address changed temporarily
ROM_0 0a87h po_cont               ; operands have been collected
ROM_0 0aach po_at_err             ; error in AT parameter(s)
ROM_0 0abfh po_at_set
ROM_0 0ac2h po_tab                ; TAB control character
ROM_0 0ac3h po_fill
ROM_0 0ad0h po_space
ROM_0 0ad9h po_able
ROM_0 0adch po_store              ; the 'position store' subroutine
ROM_0 0af0h po_st_e
ROM_0 0afch po_st_pr
ROM_0 0b03h po_fetch              ; the 'position fetch' subroutine
ROM_0 0b1dh po_f_pr
ROM_0 0b24h po_any                ; the 'PRINT any character(s)' subroutine
ROM_0 0b38h po_gr_1               ; graphic characters
ROM_0 0b3eh po_gr_2
ROM_0 0b4ch po_gr_3
ROM_0 0b52h po_t_and_udg          ; print-out token codes and user-def-graphics
ROM_0 0b5fh po_t
ROM_0 0b65h po_char               ; required character form is identified
ROM_0 0b6ah po_char_2
ROM_0 0b76h po_char_3
ROM_0 0b7fh pr_all                ; the 'PRINT all characters' subroutine
ROM_0 0b93h pr_all_1
ROM_0 0ba4h pr_all_2
ROM_0 0bb6h pr_all_3
ROM_0 0bb7h pr_all_4              ; prints the character (8 pixel lines)
ROM_0 0bc1h pr_all_5
ROM_0 0bd3h pr_all_6
ROM_0 0bdbh po_attr               ; the 'set attribute byte' subroutine
ROM_0 0bfah po_attr_1
ROM_0 0c08h po_attr_2
ROM_0 0c0ah po_msg                ; the 'message printing' subroutine
ROM_0 0c10h po_tokens             ; expanding token codes
ROM_0 0c14h po_table              ; table is searched and entry printed
ROM_0 0c22h po_each
ROM_0 0c35h po_tr_sp              ; traling space
ROM_0 0c3bh po_save               ; the 'po-save' subroutine
ROM_0 0c41h po_search             ; the 'table search' subroutine
ROM_0 0c44h po_step
ROM_0 0c55h po_scr                ; the 'test for scroll' subroutine
ROM_0 0c86h report_5              ; report 5 - Out of screen
ROM_0 0c88h po_scr_2              ; is prompt "scroll?" necessary?
ROM_0 0cd2h po_scr_3              ; scrolling the display
ROM_0 0cf0h po_scr_3a
ROM_0 0cf8h scroll_msg            ; the "scroll?" message
ROM_0 0d00h report_d2             ; report D - BREAK-CONT repeats
ROM_0 0d02h po_scr_4              ; lower part of display
ROM_0 0d1ch po_scr_4a             ; lower part is scrolled 'A' times
ROM_0 0d2dh po_scr_4b
ROM_0 0d4dh temps                 ; the 'temporary colour items' subroutine
ROM_0 0d5bh temps_1
ROM_0 0d65h temps_2
ROM_0 0d6bh cls                   ; the 'CLS' command routine
ROM_0 0d6eh cls_lower
ROM_0 0d87h cls_1
ROM_0 0d89h cls_2
ROM_0 0d8eh cls_3
ROM_0 0d94h cl_chan
ROM_0 0da0h cl_chan_a
ROM_0 0dafh cl_all                ; the 'cleaning the whole display area' subroutine
ROM_0 0dd9h cl_set                ; the 'cl-set' subroutine
ROM_0 0deeh cl_set_1
ROM_0 0df4h cl_set_2
ROM_0 0dfeh cl_sc_all             ; the 'scrolling' subroutine
ROM_0 0e00h cl_scroll
ROM_0 0e05h cl_scr_1              ; main scrolling loop
ROM_0 0e0dh cl_scr_2
ROM_0 0e19h cl_scr_3              ; scrolls the pixel lines within the thirds
ROM_0 0e44h cl_line               ; the 'clear lines' subroutine (bottom B lines of display)
ROM_0 0e4ah cl_line_1             ; loop to clear all pixel lines
ROM_0 0e4dh cl_line_2
ROM_0 0e80h cl_line_3
ROM_0 0e88h cl_attr               ; the 'cl-attr' subroutine
ROM_0 0e9bh cl_addr               ; the 'cl-addr' subroutine (calculates display address of line B)
ROM_0 0each copy_stmt             ; the 'COPY' command routine
ROM_0 0eb2h copy_1                ; loop
ROM_0 0ec9h copy_2
ROM_0 0ecdh copy_buff             ; the 'COPY-buff' subroutine
ROM_0 0ed3h copy_3
ROM_0 0edah copy_end
ROM_0 0edfh clear_prb             ; the 'clear printer buffer' subroutine
ROM_0 0ee7h prb_bytes
ROM_0 0ef4h copy_line             ; the 'COPY-line' subroutine
ROM_0 0efdh copy_l_1
ROM_0 0f0ch copy_l_2
ROM_0 0f14h copy_l_3
ROM_0 0f18h copy_l_4
ROM_0 0f1eh copy_l_5
ROM_0 0f2ch editor                ; the 'editor' routines
ROM_0 0f30h ed_again
ROM_0 0f38h ed_loop               ; loop that handles each keystroke
ROM_0 0f6ch ed_contr              ; fetch other bytes of control characters
ROM_0 0f81h add_char              ; the 'addchar' subroutine (adds a code to EDIT or INPUT line)
ROM_0 0f8bh add_ch_1
ROM_0 0f92h ed_keys               ; handling editing keys
ROM_0 0fa0h ed_keys_table         ; the 'editing keys' table
ROM_0 0fa9h ed_edit               ; the 'edit key' subroutine
ROM_0 0ff3h ed_down               ; the 'cursor down editing' subroutine
ROM_0 1001h ed_stop
ROM_0 1007h ed_left               ; the 'cursor left editing' subroutine
ROM_0 100ch ed_right              ; the 'cursor right editing' subroutine
ROM_0 1011h ed_cur
ROM_0 1015h ed_deletee            ; the 'delete editing' subroutine
ROM_0 101eh ed_ignore             ; the 'ed-ignore' subroutine
ROM_0 1024h ed_enter              ; the 'ENTER editing' subroutine
ROM_0 1026h ed_end
ROM_0 1031h ed_edge               ; the 'ed-edge' subroutine
ROM_0 103eh ed_edge_1             ; check that control codes are not split from parameters
ROM_0 1051h ed_edge_2
ROM_0 1059h ed_up                 ; the 'cursor up editing' subroutine
ROM_0 106eh ed_list
ROM_0 1076h ed_symbol             ; the 'ed-symbol' subroutine
ROM_0 107ch ed_graph
ROM_0 107fh ed_error              ; the 'ed-error' subroutine
ROM_0 1097h clear_sp              ; the 'clear-sp' subroutine (clears editing area or workspace)
ROM_0 10a8h key_input             ; the 'keyboard input' subroutine
ROM_0 10dbh key_m_and_cl          ; handles CAPS LOCK and mode codes
ROM_0 10e6h key_mode
ROM_0 10f4h key_flag
ROM_0 10fah key_contr             ; control key codes are changed
ROM_0 1105h key_data              ; parameter is saved in K-DATA
ROM_0 110dh key_next
ROM_0 1113h key_chan              ; set input address in first channel area
ROM_0 111bh key_done
ROM_0 111dh ed_copy               ; the 'lower screen copying' subroutine
ROM_0 1150h ed_blank              ; fill with blanks
ROM_0 115eh ed_spaces
ROM_0 1167h ed_full               ; editor line is full
ROM_0 117ch ed_c_done             ; normal exit
ROM_0 117eh ed_c_end
ROM_0 1190h set_hl                ; the 'set-hl' and 'set-de' subroutines
ROM_0 1195h set_de
ROM_0 11a7h remove_fp             ; the 'remove-fp' subroutine
ROM_0 11b7h new_cmd               ; the 'new' command routine
ROM_0 11cbh start_new             ; main entry point
ROM_0 11dah ram_check             ; checks memory
ROM_0 11dch ram_fill
ROM_0 11e2h ram_read
ROM_0 11efh ram_done
ROM_0 1219h ram_set               ; setups
ROM_0 12a2h main_exec             ; the 'main execution' loop
ROM_0 12a9h main_1
ROM_0 12ach main_2
ROM_0 12cfh main_3                ; edit line passed syntax check
ROM_0 1303h main_4                ; line has been interpreted
ROM_0 1313h main_g
ROM_0 133ch main_5
ROM_0 1373h main_6
ROM_0 1376h main_7
ROM_0 1384h main_8
ROM_0 1386h main_9
ROM_0 1391h report_msg            ; the report messages
ROM_0 1392h report_msg_0          ; report 0 - OK
ROM_0 1394h report_msg_1          ; report 1 - NEXT without FOR
ROM_0 13a4h report_msg_2          ; report 2 - variable not found
ROM_0 13b6h report_msg_3          ; report 3 - subscript wrong
ROM_0 13c6h report_msg_4          ; report 4 - out of memory
ROM_0 13d2h report_msg_5          ; report 5 - out of screen
ROM_0 13dfh report_msg_6          ; report 6 - number too big
ROM_0 13edh report_msg_7          ; report 7 - RETURN without GOSUB
ROM_0 1401h report_msg_8          ; report 8 - end of file
ROM_0 140ch report_msg_9          ; report 9 - STOP statement
ROM_0 141ah report_msg_A          ; report A - invalid argument
ROM_0 142ah report_msg_B          ; report B - integer out of range
ROM_0 143eh report_msg_C          ; report C - nonsense in Basic
ROM_0 144fh report_msg_D          ; report D - BREAK - CONT repeats
ROM_0 1463h report_msg_E          ; report E - out of data
ROM_0 146eh report_msg_F          ; report F - invalid file name
ROM_0 147fh report_msg_G          ; report G - no room for line
ROM_0 148fh report_msg_H          ; report H - STOP in INPUT
ROM_0 149ch report_msg_I          ; report I - FOR without NEXT
ROM_0 14ach report_msg_J          ; report J - invalid I/O device
ROM_0 14beh report_msg_K          ; report K - invalid colour
ROM_0 14cch report_msg_L          ; report L - BREAK into program
ROM_0 14deh report_msg_M          ; report M - RAMTOP no good
ROM_0 14ech report_msg_N          ; report N - statement lost
ROM_0 14fah report_msg_O          ; report O - invalid stream
ROM_0 1508h report_msg_P          ; report P - FN without DEF
ROM_0 1516h report_msg_Q          ; report Q - parameter error
ROM_0 1525h report_msg_R          ; report R - tape loading error
ROM_0 1537h report_msg_comma      ; report ', '
ROM_0 1539h report_msg_cpyrgt     ; report (C) 1982 Sinclair Research Ltd
ROM_0 1555h report_g              ; report G - no room for line
ROM_0 155dh main_add              ; the 'main-add' subroutine
ROM_0 157dh main_add_1
ROM_0 15abh main_add_2
ROM_0 15afh init_chan_info        ; the 'initial channel information'
ROM_0 15c4h report_j              ; report J - invalid I/O device
ROM_0 15c6h init_strm_data        ; the 'initial stream data'
ROM_0 15d4h wait_key              ; the 'wait-key' subroutine
ROM_0 15deh wait_key_1
ROM_0 15e4h report_8              ; report 8 - end of file
ROM_0 15e6h input_ad              ; the 'input-ad' subroutine
ROM_0 15efh out_code              ; the 'main printing' subroutine
ROM_0 15f2h print_a_2
ROM_0 15f7h call_sub              ; call subroutine; hl points to i/o address
ROM_0 1601h chan_open             ; the 'chan-open' subroutine
ROM_0 160eh report_o              ; report O - invalid stream
ROM_0 1610h chan_op_1             ; find the base address
ROM_0 1615h chan_flag             ; the 'chan-flag' subroutine
ROM_0 162ch call_jump
ROM_0 162dh chan_code_lookup      ; the 'channel code look-up' table
ROM_0 1634h chan_k                ; the 'channel "K" flag' subroutine
ROM_0 1642h chan_s                ; the 'channel "S" flag' subroutine
ROM_0 1646h chan_s_1
ROM_0 164dh chan_p                ; the 'channel "P" flag' subroutine
ROM_0 1652h one_space             ; the 'make-room' subroutine
ROM_0 1655h make_room
ROM_0 1664h pointers              ; the 'pointers' subroutine
ROM_0 166bh ptr_next              ; loop for each pointer
ROM_0 167fh ptr_done
ROM_0 168fh line_zero             ; the 'collect a line number' subroutine
ROM_0 1691h line_no_a
ROM_0 1695h line_no
ROM_0 169eh reserve               ; the 'reserve' subroutine
ROM_0 16b0h set_min               ; the 'set-min' subroutine (sets editing area to minimum)
ROM_0 16bfh set_work              ; clear workspace and calculator stack
ROM_0 16c5h set_stk               ; clears calculator stack
ROM_0 16d4h rec_edit              ; the 'reclaim the edit-line' subroutine
ROM_0 16dbh indexer_1             ; the 'indexer' subroutine
ROM_0 16dch indexer
ROM_0 16e4h close                 ; the 'CLOSE#' command routine
ROM_0 16fch close_1
ROM_0 1701h close_2               ; the 'close-2' subroutine
ROM_0 1716h cls_strm_lookup       ; the 'close stream look-up' table
ROM_0 171ch close_str             ; the 'close stream' subroutine
ROM_0 171eh str_data              ; the 'stream data' subrotine
ROM_0 1725h report_o2             ; report O - invalid stream
ROM_0 1727h str_data_1            ; continue with valid stream numbers
ROM_0 1736h open                  ; the 'OPEN#' command routine
ROM_0 1756h open_1
ROM_0 175dh open_2                ; the 'open-2' subroutine
ROM_0 1765h report_f2             ; report F - invalid file name
ROM_0 1767h open_3                ; continue if ok
ROM_0 177ah open_strm_lookup      ; the 'open stream look-up' table
ROM_0 1781h open_k                ; the 'open-K' subroutine
ROM_0 1785h open_s                ; the 'open-S' subroutine
ROM_0 1789h open_p                ; the 'open-P' subroutine
ROM_0 178bh open_end
ROM_0 1793h cat_etc               ; the 'CAT, ERASE, FORMAT & MOVE' command routine
ROM_0 1795h auto_list             ; the 'LIST & LLIST' command routines
ROM_0 17ceh auto_l_1              ; loop; auto-line number is increased on each pass
ROM_0 17e1h auto_l_2              ; auto-listing can be made
ROM_0 17e4h auto_l_3
ROM_0 17edh auto_l_4
ROM_0 17f5h llist                 ; the 'LLIST' entry point
ROM_0 17f9h list                  ; the 'LIST' entry point
ROM_0 17fbh list_1
ROM_0 1814h list_2
ROM_0 181ah list_3
ROM_0 181fh list_4                ; stream was not changed
ROM_0 1822h list_5
ROM_0 1833h list_all
ROM_0 1835h list_all_1            ; loop for printing the lines
ROM_0 1855h out_line              ; the 'PRINT a whole Basic line' subroutine
ROM_0 1865h out_line_1
ROM_0 187dh out_line_2
ROM_0 1881h out_line_3
ROM_0 1894h out_line_4            ; print all codes of the remaining line
ROM_0 18a1h out_line_5
ROM_0 18b4h out_line_6            ; line has been printed
ROM_0 18b6h number                ; the 'number' subroutine
ROM_0 18c1h out_flash             ; the 'PRINT a flashing character' subroutine
ROM_0 18e1h out_curs              ; the 'PRINT the cursor' subroutine
ROM_0 18f3h out_c_1
ROM_0 1909h out_c_2
ROM_0 190fh ln_fetch              ; the 'LN-fetch' subroutine
ROM_0 191ch ln_store              ; is used by the editor
ROM_0 1925h out_sp_2              ; the 'printing characters in a Basic line' subroutine
ROM_0 192ah out_sp_no
ROM_0 192bh out_sp_1              ; hl=line number; bc=value for division
ROM_0 1937h out_char              ; used for all characters, tokens and control codes
ROM_0 195ah out_ch_1
ROM_0 1968h out_ch_2
ROM_0 196ch out_ch_3
ROM_0 196eh line_addr             ; the 'line-addr' subroutine
ROM_0 1974h line_ad_1
ROM_0 1980h cp_lines              ; the 'compare line numbers' subroutine
ROM_0 1988h find_each             ; the 'find each statement' subroutine
ROM_0 198bh each_stmt
ROM_0 1990h each_s_1              ; loop to handle statements of Basic line
ROM_0 1998h each_s_2              ; check individual characters in the line
ROM_0 199ah each_s_3
ROM_0 19a5h each_s_4
ROM_0 19adh each_s_5
ROM_0 19b1h each_s_6
ROM_0 19b8h next_one              ; the 'next-one' subroutine
ROM_0 19c7h next_o_1
ROM_0 19ceh next_o_2
ROM_0 19d5h next_o_3
ROM_0 19d6h next_o_4
ROM_0 19dbh next_o_5              ; next line or variable is found
ROM_0 19ddh differ                ; the 'difference' subroutine
ROM_0 19e5h reclaim_1             ; the 'reclaiming' subroutine
ROM_0 19e8h reclaim_2
ROM_0 19fbh e_line_no             ; the 'e-line-no' subroutine
ROM_0 1a15h e_l_1
ROM_0 1a1bh out_num_1             ; the 'report and line number printing' subroutine
ROM_0 1a28h out_num_2
ROM_0 1a30h out_num_3             ; print line number in HL
ROM_0 1a42h out_num_4
ROM_0 1a48h syntax_table_1        ; the offset table
ROM_0 1a7ah syntax_table_2        ; the parameter table
ROM_0 1b17h line_scan             ; the 'main parser' of the Basic interpreter
ROM_0 1b28h stmt_loop             ; the statement loop
ROM_0 1b29h stmt_l_1
ROM_0 1b52h scan_loop             ; executes the commands
ROM_0 1b55h get_param
ROM_0 1b6fh separator             ; the 'separator' subroutine
ROM_0 1b76h stmt_ret              ; the 'statement-ret' subroutine
ROM_0 1b7bh report_l              ; report L - BREAK into program
ROM_0 1b7dh stmt_r_1              ; continue if BREAK is not pressed
ROM_0 1b8ah line_run              ; the 'line-run' entry point
ROM_0 1b9eh line_new              ; the 'line-new' subroutine
ROM_0 1bb0h report_0              ; report 0 - OK
ROM_0 1bb2h rem                   ; the 'REM' command routine
ROM_0 1bb3h line_end              ; the 'line-end' routine
ROM_0 1bbfh line_use              ; the 'line-use' routine
ROM_0 1bd1h next_line             ; the 'next-line' routine
ROM_0 1bech report_n              ; report N - statement lost
ROM_0 1beeh check_end             ; the 'check-end' subroutine
ROM_0 1bf4h stmt_next             ; the 'statement-next' routine
ROM_0 1c01h cmd_class_table       ; the 'command class' table
ROM_0 1c0dh class_03              ; the 'command classes 00, 03 & 05' routine (class 03 commands could have a numeric operand)
ROM_0 1c10h class_00              ; class 00 commands must not have operands
ROM_0 1c11h class_05              ; class 05 commands can have a set of items (e.g. PRINT)
ROM_0 1c16h jump_c_r              ; the 'jump-c-r' routine
ROM_0 1c1fh class_01              ; the 'command classes 01, 02 & 04' routine (class 01 has a variable that is to be assigned)
ROM_0 1c22h var_a_1               ; the 'variable in assignment' subroutine
ROM_0 1c2eh report_2b             ; report 2 - variable not found
ROM_0 1c30h var_a_2               ; handles existing variables
ROM_0 1c46h var_a_3
ROM_0 1c4eh class_02              ; class 02 contains calculation
ROM_0 1c56h val_fet_1             ; the 'fetch a value' subroutine (LET, READ, INPUT)
ROM_0 1c59h val_fet_2
ROM_0 1c6ch class_04              ; the 'command class 04' routine (FOR, NEXT)
ROM_0 1c79h next_2num             ; class 08 - evaluate next two numeric expressions (comma separated)
ROM_0 1c7ah expt_2num
ROM_0 1c82h expt_1num             ; class 06 - command line number parser
ROM_0 1c8ah report_c              ; report C - nonsense in Basic
ROM_0 1c8ch expt_exp              ; class 0A - evaluate next expression
ROM_0 1c96h perms                 ; the 'set permanent colours' subroutine (class 07)
ROM_0 1cbeh class_09              ; the 'command class 09' routine (PLOT, DRAW, CIRCLE)
ROM_0 1cd6h cl_09_1
ROM_0 1cdbh class_0b              ; the 'command class 0B' routine (SAVE, LOAD, VERIFY & MERGE)
ROM_0 1cdeh fetch_num             ; the 'fetch a number' subroutine
ROM_0 1ce6h use_zero              ; add 0 to the calculator stack
ROM_0 1ceeh report_9              ; the 'STOP' command routine
ROM_0 1cf0h if                    ; the 'IF' command routine
ROM_0 1d00h if_1
ROM_0 1d03h for                   ; the 'FOR' command routine
ROM_0 1d10h f_use_1               ; STEP 1 has been used
ROM_0 1d16h f_reorder
ROM_0 1d34h f_l_and_s             ; initial values for limit and STEP
ROM_0 1d64h f_loop                ; search next from current position
ROM_0 1d7ch f_found               ; correct NEXT has been found
ROM_0 1d84h report_i              ; report I - FOR without NEXT
ROM_0 1d86h look_prog             ; the 'look-prog' subroutine (search DATA, DEF FN or NEXT)
ROM_0 1d8bh look_p_1              ; loop for each line
ROM_0 1da3h look_p_2
ROM_0 1dabh next                  ; the 'NEXT' command routine
ROM_0 1dd8h report_1              ; report 1 - NEXT without FOR
ROM_0 1ddah next_loop             ; the 'NEXT-loop' subroutine
ROM_0 1de2h next_1
ROM_0 1de9h next_2                ; loop is impossible
ROM_0 1dech read_3                ; the 'READ' command routine
ROM_0 1dedh read
ROM_0 1e08h report_e2             ; report E - out of data
ROM_0 1e0ah read_1                ; picking a value from DATA list
ROM_0 1e1eh read_2
ROM_0 1e27h data                  ; the 'DATA' command routine
ROM_0 1e2ch data_1                ; loop for each expression in DATA list
ROM_0 1e37h data_2                ; DATA statement ignored at runtime
ROM_0 1e39h pass_by               ; the 'pass-by' subroutine
ROM_0 1e42h restore               ; the 'RESTORE' command routine
ROM_0 1e45h rest_run
ROM_0 1e4fh randomize             ; the 'RANDOMIZE' command routine
ROM_0 1e5ah rand_1
ROM_0 1e5fh continue              ; the 'CONTINUE' command routine
ROM_0 1e67h go_to                 ; the 'GO TO' command routine
ROM_0 1e73h go_to_2               ; determine line number of next statement
ROM_0 1e7ah out                   ; the 'OUT' command routine
ROM_0 1e80h poke                  ; the 'POKE' command routine
ROM_0 1e85h two_param             ; the 'two-param' subroutine
ROM_0 1e8eh two_p_1
ROM_0 1e94h find_int1             ; the 'find integers' subroutine (integer into A)
ROM_0 1e99h find_int2             ; command line integer parser into BC
ROM_0 1e9ch find_i_1
ROM_0 1e9fh report_b2             ; report B - integer out of range
ROM_0 1ea1h run                   ; the 'RUN' command routine
ROM_0 1each clear                 ; the 'CLEAR' command routine
ROM_0 1eafh clear_run
ROM_0 1eb7h clear_1
ROM_0 1edah report_m              ; report M - RAMTOP no good
ROM_0 1edch clear_3               ; continue with CLEAR
ROM_0 1eedh go_sub                ; the 'GO SUB' command routine
ROM_0 1f05h test_room             ; the 'test-room' subroutine
ROM_0 1f15h report_4              ; report 4 - out of memory
ROM_0 1f1ah free_mem              ; the 'free memory' subroutine
ROM_0 1f23h return_stmt           ; the 'RETURN' command routine
ROM_0 1f36h report_7              ; report 7 - RETURN without GOSUB
ROM_0 1f3ah pause                 ; the 'PAUSE' command routine
ROM_0 1f3dh pause_1
ROM_0 1f49h pause_2
ROM_0 1f4fh pause_end             ; period of pause has finished
ROM_0 1f54h break_key             ; the 'BREAK-key' subroutine
ROM_0 1f60h def_fn                ; the 'DEF FN' command routine
ROM_0 1f6ah def_fn_1              ; get the variable
ROM_0 1f7dh def_fn_2
ROM_0 1f86h def_fn_3              ; loop for each parameter
ROM_0 1f89h def_fn_4
ROM_0 1f94h def_fn_5
ROM_0 1fa6h def_fn_6              ; get the definition of the function
ROM_0 1fbdh def_fn_7
ROM_0 1fc3h unstack_z             ; the 'unstack-z' subroutine
ROM_0 1fc9h lprint                ; the 'LPRINT & PRINT' command routines
ROM_0 1fcdh print
ROM_0 1fcfh print_1
ROM_0 1fdfh print_2               ; print controlling (PRINT, LPRINT, INPUT)
ROM_0 1fe5h print_3               ; position controllers
ROM_0 1ff2h print_4
ROM_0 1ff5h print_cr              ; the 'PRINT a carriage return' subroutine
ROM_0 1ffch pr_item_1             ; the 'PRINT items' subroutine (test for AT)
ROM_0 200eh pr_item_2             ; test for TAB
ROM_0 201eh pr_at_tab             ; print AT and TAB
ROM_0 2024h pr_item_3             ; embedded colour items
ROM_0 203ch pr_string             ; loop for characters in a string
ROM_0 2045h pr_end_z              ; the 'end of printing' subroutine
ROM_0 2048h pr_st_end
ROM_0 204eh pr_posn_1             ; the 'PRINT position' subroutine
ROM_0 2061h pr_posn_2
ROM_0 2067h pr_posn_3
ROM_0 206eh pr_posn_4
ROM_0 2070h str_alter             ; the 'alter stream' subroutine
ROM_0 2089h input                 ; the 'INPUT' command routine
ROM_0 2096h input_1
ROM_0 20adh input_2
ROM_0 20c1h in_item_1             ; INPUT and PRINT items loop
ROM_0 20d8h in_item_2             ; INPUT LINE
ROM_0 20edh in_item_3             ; simple INPUT variables
ROM_0 20fah in_prompt             ; build prompt message in workspace
ROM_0 211ah in_pr_1
ROM_0 211ch in_pr_2
ROM_0 2129h in_pr_3
ROM_0 213ah in_var_1              ; input variables
ROM_0 2148h in_var_2
ROM_0 215eh in_var_3
ROM_0 2161h in_var_4              ; reset system variables before assignment
ROM_0 2174h in_var_5
ROM_0 219bh in_var_6
ROM_0 21afh in_next_1             ; further INPUT items
ROM_0 21b2h in_next_2
ROM_0 21b9h in_assign             ; the 'INPUT-assign' subroutine
ROM_0 21ceh report_c2             ; report C - Nonsense in Basic
ROM_0 21d0h in_stop               ; INPUT line starts with STOP
ROM_0 21d4h report_h              ; report H - STOP in INPUT
ROM_0 21d6h in_chan_k             ; the 'INPUT-chan-K' subroutine
ROM_0 21e1h co_temp_1             ; the 'colour item' routines
ROM_0 21e2h co_temp_2
ROM_0 21f2h co_temp_3
ROM_0 21fch co_temp_4             ; colour items are printed calling PRINT
ROM_0 2211h co_temp_5             ; temporary system variables
ROM_0 2228h co_temp_6
ROM_0 2234h co_temp_7             ; handle PAPER & INK
ROM_0 223eh co_temp_8
ROM_0 2244h report_k              ; report K - invalid colour
ROM_0 2246h co_temp_9             ; continue handling PAPER & INK
ROM_0 2257h co_temp_a
ROM_0 2258h co_temp_b
ROM_0 226ch co_change             ; the 'colour-change' subroutine
ROM_0 2273h co_temp_c             ; handling FLASH & BRIGHT
ROM_0 227dh co_temp_d
ROM_0 2287h co_temp_e
ROM_0 2294h border                ; the 'BORDER' command routine
ROM_0 22a6h border_1
ROM_0 22aah pixel_add             ; the 'pixel address' subroutine (returns pixel addr in HL for coord in BC)
ROM_0 22cbh point_sub             ; the 'POINT' subroutine
ROM_0 22d4h point_lp
ROM_0 22dch plot                  ; the 'PLOT' command routine
ROM_0 22e5h plot_sub
ROM_0 22f0h plot_loop
ROM_0 22fdh pl_tst_in
ROM_0 2303h plot_end
ROM_0 2307h stk_to_bc             ; the 'stack-to-bc' subroutine
ROM_0 2314h stk_to_a              ; the 'stack-to-a' subroutine
ROM_0 2320h circle                ; the 'CIRCLE' command routine
ROM_0 233bh c_r_gre_1             ; on stack = X Y Z draws circle
ROM_0 235ah c_arc_ge1
ROM_0 2382h draw                  ; the 'DRAW' command routine
ROM_0 238dh dr_3_prms             ; DRAW with 3 params
ROM_0 23a3h dr_sin_nz
ROM_0 23c1h dr_prms
ROM_0 2420h drw_steps             ; the arc-drawing loop
ROM_0 2425h arc_loop
ROM_0 2439h arc_start
ROM_0 245fh arc_end
ROM_0 2477h line_draw
ROM_0 247dh cd_prms1              ; the 'initial parameters' subroutine (CIRCLE, DRAW)
ROM_0 2495h use_252
ROM_0 2497h draw_save
ROM_0 24b7h draw_line             ; the 'line-drawing' subroutine (draws a line from COORDS to BC)
ROM_0 24c4h dl_x_ge_y
ROM_0 24cbh dl_larger
ROM_0 24ceh d_l_loop
ROM_0 24d4h d_l_diag
ROM_0 24dbh d_l_hr_vt
ROM_0 24dfh d_l_step
ROM_0 24ech d_l_plot
ROM_0 24f7h d_l_range
ROM_0 24f9h report_b3             ; report B - integer out of range
ROM_0 24fbh scanning              ; the 'scanning' subroutine (expression evaluation)
ROM_0 24ffh s_loop_1
ROM_0 250fh s_quote_s             ; checking string quotes
ROM_0 2522h s_2_coord             ; two-coordinates subroutine
ROM_0 252dh s_rport_c
ROM_0 2530h syntax_z              ; the 'syntax-z' subroutine
ROM_0 2535h s_scrns_s
ROM_0 254fh s_scrn_lp
ROM_0 255ah s_sc_match
ROM_0 255dh s_sc_rows
ROM_0 2573h s_scr_nxt
ROM_0 257dh s_scr_sto
ROM_0 2580h s_attr_s
ROM_0 2596h scn_func_table        ; the scanning function table
ROM_0 25afh s_u_plus              ; the scanning function routines
ROM_0 25b3h s_quote               ; the scanning quote routine
ROM_0 25beh s_q_again
ROM_0 25cbh s_q_copy
ROM_0 25d9h s_q_prms
ROM_0 25dbh s_string
ROM_0 25e8h s_bracket             ; reduces string quotes pairs
ROM_0 25f5h s_fn
ROM_0 25f8h s_rnd                 ; the 'RND' routine
ROM_0 2625h s_rnd_end
ROM_0 2627h s_pi                  ; the 'PI' routine
ROM_0 2630h s_pi_end
ROM_0 2634h s_inkeys              ; the 'INKEY$' routine
ROM_0 2660h s_ik_stk
ROM_0 2665h s_ik_en
ROM_0 2668h s_screens             ; the 'SCREEN$' routine
ROM_0 2672h s_attr                ; the 'ATTR' routine
ROM_0 267bh s_point               ; the 'POINT' routine
ROM_0 2684h s_alphanum
ROM_0 268dh s_decimal             ; scanning decimal routine
ROM_0 26b5h s_stk_dec
ROM_0 26b6h s_sd_skip
ROM_0 26c3h s_numeric             ; numeric result has been identified
ROM_0 26c9h s_letter              ; the 'scanning variable' routine
ROM_0 26ddh s_cont_1
ROM_0 26dfh s_negate              ; checking for negation
ROM_0 2707h s_no_to_str           ; checking for STR$ and CHR$
ROM_0 270dh s_push_po             ; remember priority code
ROM_0 2712h s_cont_2              ; checking for end of expression
ROM_0 2713h s_cont_3
ROM_0 2723h s_opertr
ROM_0 2734h s_loop                ; main loop
ROM_0 274ch s_stk_lst
ROM_0 275bh s_syntest             ; syntax check
ROM_0 2761h s_report_c2           ; report C - Nonsense in Basic
ROM_0 2764h s_runtest             ; remember nature of last value
ROM_0 2770h s_loopend             ; continue loop
ROM_0 2773h s_tighter
ROM_0 2788h s_not_and
ROM_0 2790h s_next
ROM_0 2795h table_ops             ; the table of operators
ROM_0 27b0h table_prior           ; the table of properties
ROM_0 27bdh s_fn_sbrn             ; the 'scanning function' subroutine
ROM_0 27d0h sf_brkt_1             ; check for '('
ROM_0 27d9h sf_argmts
ROM_0 27e4h sf_brkt_2             ; check for ')'
ROM_0 27e6h sf_rprt_c             ; if not, report C - nonsense in Basic
ROM_0 27e9h sf_flag_6
ROM_0 27f4h sf_syn_en             ; continue scanning the line
ROM_0 27f7h sf_run                ; search for DEF FN statement
ROM_0 2802h sf_argmt1
ROM_0 2808h sf_find_df
ROM_0 2812h report_p              ; report P - FN without DEF
ROM_0 2814h sf_cp_def             ; DEF FN found
ROM_0 2825h sf_not_fd
ROM_0 2831h sf_values             ; FN is being evaluated
ROM_0 2843h sf_arg_lp
ROM_0 2852h sf_arg_vl
ROM_0 2885h sf_r_br_2             ; check for ')'
ROM_0 288bh report_q              ; report Q - parameter error
ROM_0 288dh sf_value              ; evaluate function
ROM_0 28abh fn_skipover           ; the 'function skipover' subroutine
ROM_0 28b2h look_vars             ; the 'look-vars' subroutine
ROM_0 28d4h v_char                ; find end char of name with more than 1 character
ROM_0 28deh v_str_var             ; simple strings and arrays of strings
ROM_0 28e3h v_test_fn
ROM_0 28efh v_run_syn
ROM_0 28fdh v_run                 ; basic line is being executed
ROM_0 2900h v_each                ; loop that scans all existing variables
ROM_0 2912h v_matches
ROM_0 2913h v_spaces
ROM_0 2929h v_get_ptr             ; names do not match
ROM_0 292ah v_next
ROM_0 2932h v_80_byte             ; variable not found
ROM_0 2934h v_syntax              ; checking snytax
ROM_0 293eh v_found_1             ; entry with correct name was found
ROM_0 293fh v_found_2
ROM_0 2943h v_pass
ROM_0 294bh v_end                 ; setting exit parameters
ROM_0 2951h stk_f_arg             ; the 'stack function argument' subroutine
ROM_0 295ah sfa_loop
ROM_0 296bh sfa_cp_vr
ROM_0 2981h sfa_match             ; match has been found.
ROM_0 2991h sfa_end
ROM_0 2996h stk_var               ; the 'stack-var' routine
ROM_0 29a1h sv_simplestring       ; simple string params found
ROM_0 29aeh sv_arrays             ; base address of an array element found
ROM_0 29c0h sv_ptr                ; numeric arrays and string arrays pointer into DE
ROM_0 29c3h sv_comma              ; find array element parameters
ROM_0 29d8h sv_close              ; checking for string slicing
ROM_0 29e0h sv_ch_add
ROM_0 29e7h sv_count              ; parameter loop
ROM_0 29eah sv_loop
ROM_0 29fbh sv_mult
ROM_0 2a12h sv_rpt_c              ; report error C if syntax checking
ROM_0 2a20h report_3              ; report 3 - Subscript out of range
ROM_0 2a22h sv_number             ; calculate address of the location
ROM_0 2a2ch sv_elemstring         ; calculate length of last string array dimension
ROM_0 2a45h sv_slice              ; call slicing routine
ROM_0 2a48h sv_dim                ; check for '('
ROM_0 2a49h sv_sliceq             ; search the last '(' in a loop
ROM_0 2a52h slicing               ; the 'slicing' subroutine
ROM_0 2a7ah sl_rpt_c              ; report C if not ' TO '
ROM_0 2a81h sl_second             ; evaluate second parameter of slicing
ROM_0 2a94h sl_define             ; the 'new' parameters are defined
ROM_0 2aa8h sl_over
ROM_0 2aadh sl_store
ROM_0 2ab1h stk_st_0              ; the 'stack-store' subroutine
ROM_0 2ab2h stk_sto_string
ROM_0 2ab6h stk_store             ; put ABCDE to top of stack
ROM_0 2acch int_exp1              ; the 'int-exp' subroutine
ROM_0 2acdh int_exp2
ROM_0 2ae8h i_carry               ; calc value for 'error register'
ROM_0 2aebh i_restore             ; restore registers
ROM_0 2aeeh ld_de_plus_1          ; the 'LD DE,(DE+1)" subroutine
ROM_0 2af4h get_hl_times_de       ; the 'get-HL*DE' subroutine
ROM_0 2affh let                   ; the 'LET' command routine
ROM_0 2b0bh l_each_ch             ; enter loop for characters of a long name
ROM_0 2b0ch l_no_sp
ROM_0 2b1fh l_test_ch             ; separate numeric and string names
ROM_0 2b29h l_spaces              ; make room for variable
ROM_0 2b3eh l_char                ; extra codes of a long name
ROM_0 2b4fh l_single
ROM_0 2b59h l_numeric             ; last value can be transferred to var area
ROM_0 2b66h l_exists              ; variable already exists
ROM_0 2b72h l_deletestring        ; fetch params of string variable
ROM_0 2b9bh l_length              ; put length of new area to stack
ROM_0 2ba3h l_in_ws               ; restore saved values
ROM_0 2ba6h l_enter               ; the 'L-enter' subroutine
ROM_0 2bafh l_addstring           ; LET subroutine continues
ROM_0 2bc0h l_newstring           ; new declared simple strings are handled
ROM_0 2bc6h l_string              ; the 'L-string' subroutine
ROM_0 2beah l_first               ; the 'L-first' subroutine
ROM_0 2bf1h stk_fetch             ; the 'stk-fetch' subroutine - fetch top of stack to ABCDE
ROM_0 2c02h dim_stmt              ; the 'DIM' command routine
ROM_0 2c05h d_report_c            ; report C
ROM_0 2c15h d_run                 ; reclaims an existing array
ROM_0 2c1fh d_letter              ; initial parameters of new array are found
ROM_0 2c2dh d_size
ROM_0 2c2eh d_no_loop             ; loop for accessing each dimension
ROM_0 2c7ch dim_clear             ; clears elements of new array
ROM_0 2c7fh dim_sizes             ; enters the dimension sizes
ROM_0 2c88h alphanum              ; the 'alphanum' subroutine
ROM_0 2c8dh alpha                 ; the 'alpha' subroutine (checks whether a contains a letter)
ROM_0 2c9bh dec_to_fp             ; the 'decimal to floating point' subroutine
ROM_0 2ca2h bin_digit             ; it's a binary number (after BIN)
ROM_0 2cb3h bin_end               ; end of binary number
ROM_0 2cb8h not_bin               ; other numbers (integers or decimal)
ROM_0 2ccbh decimal               ; number is a decimal
ROM_0 2ccfh dec_rpt_c             ; if no digit after a '.', report C
ROM_0 2cd5h dec_sto_1             ; store 1 in memory area M0
ROM_0 2cdah nxt_dgt_1             ; evaluate next digit
ROM_0 2cebh e_format              ; check 'E' or 'e' after decimal
ROM_0 2cf2h sign_flag
ROM_0 2cfeh sign_done
ROM_0 2cffh st_e_part             ; check for digit after E/e
ROM_0 2d18h e_fp_jump             ; jump to x*10^m
ROM_0 2d1bh numeric               ; the 'numeric' subroutine (check for 0..9)
ROM_0 2d22h stk_digit             ; the 'stk digit' subroutine
ROM_0 2d28h stack_a               ; the 'stack-A' subroutine (stack contents of A)
ROM_0 2d2bh stack_bc              ; the 'stack-BC' subroutine (stack contents of BC)
ROM_0 2d3bh int_to_fp             ; the 'integer to floating-point' subroutine
ROM_0 2d40h nxt_dgt_2
ROM_0 2d4fh e_to_fp               ; the 'E-format to floating-point' subroutine
ROM_0 2d55h e_save
ROM_0 2d60h e_loop
ROM_0 2d6dh e_division
ROM_0 2d6eh e_fetch
ROM_0 2d71h e_test_end
ROM_0 2d7bh e_end
ROM_0 2d7fh int_fetch             ; the 'int-fetch' subroutine
ROM_0 2d8ch p_int_sto             ; the 'int-store' subroutine
ROM_0 2d8eh int_store
ROM_0 2da2h fp_to_bc              ; the 'floating-point to BC' subroutine
ROM_0 2dadh fp_delete
ROM_0 2dc1h log_2_pow_a           ; the 'LOG (2^A)' subroutine
ROM_0 2dd5h fp_to_a               ; the 'floating-point to a' subroutine
ROM_0 2de1h fp_a_end
ROM_0 2de3h print_fp              ; the 'print a floating-point number' subroutine
ROM_0 2df2h pf_negative
ROM_0 2df8h pf_positive
ROM_0 2e01h pf_loop               ; loop for large numbers
ROM_0 2e1eh pf_save
ROM_0 2e24h pf_small
ROM_0 2e56h pf_large              ; numbers > 2^27
ROM_0 2e6fh pf_medium             ; integer part of X is stored in mem 3 and 4
ROM_0 2e7bh pf_bits               ; numbers < 65536
ROM_0 2e8ah pf_bytes
ROM_0 2ea1h pf_digits
ROM_0 2ea9h pf_insert
ROM_0 2eb3h pf_test_2
ROM_0 2eb8h pf_all_9
ROM_0 2ecbh pf_more
ROM_0 2ecfh pf_fraction           ; fractionla part of X is stored in the print buffer
ROM_0 2edfh pf_frn_lp
ROM_0 2eech pf_fr_dgt
ROM_0 2eefh pf_fr_exx
ROM_0 2f0ch pf_round              ; round the digits in the print buffer to max. 8 digits
ROM_0 2f18h pf_round_lp
ROM_0 2f25h pf_round_back
ROM_0 2f2dh pf_count
ROM_0 2f46h pf_not_e
ROM_0 2f4ah pf_e_sbrn
ROM_0 2f52h pf_out_lp
ROM_0 2f59h pf_out_dig
ROM_0 2f5eh pf_dec_out
ROM_0 2f64h pf_dec_0s
ROM_0 2f6ch pf_e_format
ROM_0 2f83h pf_e_pos
ROM_0 2f85h pf_e_sign
ROM_0 2f8bh ca_is_10a_plus_c      ; the 'CA=10*A+C' subroutine
ROM_0 2f9bh prep_add              ; the 'prepare to add' subroutine
ROM_0 2fafh neg_byte
ROM_0 2fbah fetch_two             ; the 'fetch two numbers' subroutine
ROM_0 2fddh shift_fp              ; the 'shift addend' subroutine
ROM_0 2fe5h one_shift
ROM_0 2ff9h addend_0
ROM_0 2ffbh zeros_4_5
ROM_0 3004h add_back              ; the 'add-back' subroutine
ROM_0 300dh all_added
ROM_0 300fh calc_subtract         ; the 'subtraction' operation (offset 03: 'subtract')
ROM_0 3014h calc_addition         ; the 'addition' operation (offset 0F: 'addition')
ROM_0 303ch addn_overflow
ROM_0 303eh full_addn
ROM_0 3055h shift_len
ROM_0 307ch test_neg
ROM_0 309fh add_rep_6             ; report 6
ROM_0 30a3h end_compl
ROM_0 30a5h go_nc_mlt
ROM_0 30a9h hl_is_hl_times_de     ; the 'HL=HL*DE' subroutine
ROM_0 30b1h hl_loop
ROM_0 30bch hl_again
ROM_0 30beh hl_end
ROM_0 30c0h prep_mul_div          ; the 'prepare to multiply or divide' subroutine
ROM_0 30cah calc_multiply         ; the 'multiplication' operation (offset 04: 'multiply')
ROM_0 30eah mult_rslt
ROM_0 30efh mult_overflow
ROM_0 30f0h mult_long
ROM_0 3114h mult_loop             ; multiplier loop
ROM_0 311bh no_add
ROM_0 3125h strt_mlt
ROM_0 313bh make_exp
ROM_0 313dh divn_expt             ; common for multiplication and division
ROM_0 3146h overflow1_clr
ROM_0 3151h overflow2_clr
ROM_0 3155h test_norm             ; normalisation
ROM_0 3159h near_zero
ROM_0 315dh zero_rslt
ROM_0 315eh skip_zero
ROM_0 316ch normalise             ; the normalisation operation
ROM_0 316eh shift_one
ROM_0 3186h normal_now            ; finish the nomalisation
ROM_0 3195h overflow_clr
ROM_0 31adh report_6              ; report 6 - number too big
ROM_0 31afh calc_division         ; the 'division' operation (offset 05: 'division')
ROM_0 31d2h div_loop              ; division loop
ROM_0 31dbh div_34th
ROM_0 31e2h div_start
ROM_0 31f2h subn_only
ROM_0 31f9h no_restore
ROM_0 31fah count_one
ROM_0 3214h calc_truncate         ; the 'integer truncation towards zero' operation (offset 3A: 'truncate')
ROM_0 3221h t_gr_zero
ROM_0 3225h chk_65536             ; check for -65536
ROM_0 3233h t_first
ROM_0 323fh t_small               ; check for small integers
ROM_0 3252h t_numeric
ROM_0 325eh t_test
ROM_0 3261h t_shift
ROM_0 3267h t_store
ROM_0 326ch t_exponent            ; large values are considered
ROM_0 326dh x_large
ROM_0 3272h nil_bytes             ; clear the mantissa bytes
ROM_0 327eh byte_zero
ROM_0 3283h bits_zero
ROM_0 328ah less_mask
ROM_0 3290h ix_end
ROM_0 3293h re_st_two             ; the 're-stack two' subroutine
ROM_0 3296h restk_sub
ROM_0 3297h re_stack              ; the 're-stack' subroutine
ROM_0 32b1h rs_normalise
ROM_0 32b2h rs_loop
ROM_0 32bdh rs_store
ROM_0 32c5h stk_zero              ; condensed form of 0 (table of constants)
ROM_0 32c8h stk_one               ; condensed form of 1
ROM_0 32cch stk_half              ; condensed form of 0.1
ROM_0 32ceh stk_pi_half           ; PI/2
ROM_0 32d3h stk_ten               ; condensed form of 10
ROM_0 32d7h stk_addr_table        ; the table of addresses
ROM_0 335bh calculate             ; the 'calculate' subroutine
ROM_0 335eh gen_ent_1
ROM_0 3362h gen_ent_2
ROM_0 3365h re_entry
ROM_0 336ch scan_ent
ROM_0 3380h first_3d
ROM_0 338ch double_a
ROM_0 338eh ent_table
ROM_0 33a1h calc_delete           ; the 'delete' operation (offset 02: 'delete')
ROM_0 33a2h calc_fp_calc_2        ; the 'single operation' subroutine (offset 3B: 'fp-calc-2')
ROM_0 33a9h test_5_sp             ; the 'test 5-spaces' subroutine
ROM_0 33b4h stack_num             ; the 'stack number' subroutine
ROM_0 33c0h move_fp               ; the 'move a floating-point number' subroutine (offset 31: 'duplicate')
ROM_0 33c6h stk_data              ; the 'stack literals' subroutine (offset 34: 'stk-data')
ROM_0 33c8h stk_const
ROM_0 33deh form_exp
ROM_0 33f1h stk_zeros
ROM_0 33f7h skip_cons             ; the 'skip constants' subroutine
ROM_0 33f8h skip_next
ROM_0 3406h loc_mem               ; the 'memory location' subroutine
ROM_0 340fh calc_get_mem_0        ; the 'get from memory area' operation (offsets E0..E5: 'get-mem-0' .. 'get-mem-5')
ROM_0 341bh calc_stk_zero         ; the 'stack a constant' operation (offsets A0..A4: 'stk-zero'..''stk-ten')
ROM_0 342dh calc_st_mem_0         ; the 'store in memory area' operation (offsets C0..C5: 'st-mem-0'..'st-mem-5')
ROM_0 343ch exchange              ; the 'exchange' operation (offset 01: 'exchange')
ROM_0 343eh swap_byte
ROM_0 3449h calc_series_06        ; the 'series generator' operation (offsets 86, 88, 8C: 'series-06', 'series-08', 'series-0C')
ROM_0 3453h g_loop                ; polynom generation main loop
ROM_0 346ah calc_abs              ; the 'absolute magnitude' operation (offset 2A: 'abs')
ROM_0 346eh calc_negate           ; the 'unary minus' operation (offset 1B: 'negate')
ROM_0 3474h neg_test              ; 'ABS' enters here
ROM_0 3483h int_case              ; the 'integer case' subroutine
ROM_0 3492h calc_sgn              ; the 'signum' operation (offset 29: 'sgn')
ROM_0 34a5h calc_in               ; the 'IN' function (offset 2C: 'in')
ROM_0 34ach calc_peek             ; the 'PEEK' function (offset 2B: 'peek')
ROM_0 34b0h in_pk_stk
ROM_0 34b3h calc_usr_no           ; the 'USR' function (offset 2D: 'usr-no')
ROM_0 34bch calc_usr_string       ; the 'USR-string' function (offset 19: 'usr-$')
ROM_0 34d3h usr_range
ROM_0 34e4h usr_stack
ROM_0 34e7h report_a              ; report A - invalid argument
ROM_0 34e9h test_zero             ; the 'test-zero' subroutine
ROM_0 34f9h calc_greater_0        ; the 'greater than zero' operation (offset 37: 'greater-0')
ROM_0 3501h calc_not              ; the 'NOT' operation (offset 30: 'not')
ROM_0 3506h calc_less_0           ; the 'less than zero' operation (offset 36: 'less-0')
ROM_0 3507h sign_to_c
ROM_0 350bh fp_0_1                ; the 'zero or one' subroutine
ROM_0 351bh calc_or               ; the 'OR' operation (offset 07: 'or')
ROM_0 3524h calc_no_and_no        ; the 'number AND number' operation (offset 08: 'no-and-no')
ROM_0 352dh calc_str_and_no       ; the 'string AND number' operation (offset 10: 'str-and-no')
ROM_0 353bh calc_comparison       ; the 'comparison' operations (offsets 09..0E, 11..16: 'no-l-eql'..'strs-eql')
ROM_0 3543h ex_or_not
ROM_0 354eh nu_or_str
ROM_0 3559h strings
ROM_0 3564h byte_comp
ROM_0 356bh second_low
ROM_0 3572h both_null
ROM_0 3575h sec_plus
ROM_0 3585h first_less
ROM_0 3588h str_test
ROM_0 358ch end_tests
ROM_0 359ch calc_strs_add         ; the 'string concatenation' operation (offset 17: 'strs-add')
ROM_0 35b7h other_str
ROM_0 35bfh stk_pntrs             ; the 'stk-pntrs' subroutine
ROM_0 35c9h calc_chrs             ; the 'CHR$' function (offset 2F: 'chr$')
ROM_0 35dch report_b4             ; report B - integer out of range
ROM_0 35deh calc_val              ; the 'VAL' and 'VAL$' operation (offsets 1D: 'val', and 18: 'val$')
ROM_0 360ch v_report_c
ROM_0 361fh calc_strstring        ; the 'STR$' function (offset 2E: 'str$')
ROM_0 3645h calc_read_in          ; the 'read-in' operation (offset 1A: 'read-in')
ROM_0 365fh r_i_store
ROM_0 3669h calc_code             ; the 'CODE' function (offset 1C: 'code')
ROM_0 3671h stk_code
ROM_0 3674h calc_len              ; the 'LEN' function (offset 1E: 'len')
ROM_0 367ah calc_dec_jr_nz        ; the 'decrease the counter' subroutine (offset 35: 'dec-jr-nz')
ROM_0 3686h calc_jump             ; the 'jump' operation (offset 33: 'jump')
ROM_0 3687h jump_2
ROM_0 368fh calc_jump_true        ; the 'jump on true' subroutine (offset 00: 'jump-true')
ROM_0 369bh calc_end_calc         ; the 'end-calc' subroutine (offset 38: 'end-calc')
ROM_0 36a0h calc_n_mod_m          ; the 'modulo' subroutine (offset 32: 'n-mod-m')
ROM_0 36afh calc_int              ; the 'INT' operation (offset 27: 'int')
ROM_0 36b7h x_neg
ROM_0 36c2h int_exit
ROM_0 36c4h calc_exp              ; the 'exponential' operation (offset 26: 'exp')
ROM_0 3703h report_6b             ; report 6 - number too big
ROM_0 3705h n_negative
ROM_0 370ch result_ok
ROM_0 370eh result_zero
ROM_0 3713h calc_ln               ; the 'natural logarithm' operation (offset 25: 'ln')
ROM_0 371ah report_a2             ; report A - Invalid argument
ROM_0 371ch ln_valid
ROM_0 373dh gre_0_8
ROM_0 3783h calc_get_argt         ; the 'reduce argument' operation (offset 39: 'get-argt')
ROM_0 37a1h zplus
ROM_0 37a8h yneg
ROM_0 37aah calc_cos              ; the 'cosine' operation (offset 20: 'cos')
ROM_0 37b5h calc_sine             ; the 'sine' operation (offset 1f: 'sin')
ROM_0 37b7h c_ent
ROM_0 37dah calc_tan              ; the 'tangens' operation (offset 21: 'tan')
ROM_0 37e2h calc_atn              ; the 'arcus tangens' operation (offset 24: 'atn')
ROM_0 37f8h atn_small
ROM_0 37fah atn_cases
ROM_0 3833h calc_asn              ; the 'arcus sine' operation (offset 22: 'asn')
ROM_0 3843h calc_acs              ; the 'arcus cosine' operation (offset 23: 'acs')
ROM_0 384ah calc_sqr              ; the 'square root' operation (offset 28: 'sqr')
ROM_0 3851h calc_to_power         ; the 'exponentiation' operation (offset 06: 'to-power')
ROM_0 385dh tp_xis0
ROM_0 386ah tp_one
ROM_0 386ch tp_last
ROM_0 3d00h character_set         ; the character set
ROM_0 4000h display_file          ; screen display file
ROM_0 5800h attrs                 ; screen colour attributes
ROM_0 5b00h swap                  ; paging subroutine
ROM_0 5b10h stoo                  ; paging subroutine
ROM_0 5b21h younger               ; paging subroutine
ROM_0 5b2ah regnuoy               ; paging subroutine
ROM_0 5b3ah onerr                 ; paging subroutine
ROM_0 5b52h oldhl                 ; temp. register while switching ROMs
ROM_0 5b54h oldbc                 ; temp. register while switching ROMs
ROM_0 5b56h oldaf                 ; temp. register while switching ROMs
ROM_0 5b58h target                ; subroutine address in ROM 3
ROM_0 5b5ah retaddr               ; return address in ROM 1
ROM_0 5b5ch bankm                 ; copy of last byte output to bank
ROM_0 5b5dh ramrst                ; RST 8 instruction
ROM_0 5b5eh ramerr                ; error number, ROM 1
ROM_0 5b5fh baud                  ; RS232 bit period in T states/26
ROM_0 5b61h serfl                 ; 2nd-character-received-flag, and data
ROM_0 5b63h col                   ; current column from 1 to width
ROM_0 5b64h width                 ; paper column width
ROM_0 5b65h tvpars                ; no of inline params expected by RS232
ROM_0 5b66h flags3                ; various flags
ROM_0 5b67h bank678               ; copy of last byte output to I/O port 1FFDh (ram switching)
ROM_0 5b68h xloc                  ; x location when using unexpanded COPY command
ROM_0 5b69h yloc                  ; y location when using unexpanded COPY command
ROM_0 5b6ah oldsp                 ; old SP (stack pointer) when TSTACK is in use
ROM_0 5b6ch synret                ; return address for ONERR
ROM_0 5b6eh lastv                 ; last value printed by calculator
ROM_0 5b73h rcline                ; current line being renumbered
ROM_0 5b75h rcstart               ; starting line number for renumbering
ROM_0 5b77h rcstep                ; incremental value for renumbering
ROM_0 5b79h loddrv                ; holds 'T' if SAVE is to tape or other characters
ROM_0 5b7ah dumplf                ; holds the bumber of 1/216ths user for line feeds in COPY EXP
ROM_0 5b7ch strip1                ; stripe one bitmap
ROM_0 5b84h strip2                ; stripe two bitmap
ROM_0 5b8ch tstack                ; temp. stack grows down from here
ROM_0 5c00h kstate                ; keyboard bytes
ROM_0 5c08h last_k                ; last keypress
ROM_0 5c09h repdel                ; delay until repeat starts (default 35)
ROM_0 5c0ah repper                ; key repeat delay (default 5)
ROM_0 5c0bh defadd                ; pointer to DEF FN params during eval
ROM_0 5c0dh k_data                ; second byte of colour control from keyboard
ROM_0 5c0eh tvdata                ; both bytes of colour, AT, TAB controls
ROM_0 5c10h strms                 ; address of stream data
ROM_0 5c36h chars                 ; address - 0100h of character definitions in ROM (3d00h)
ROM_0 5c38h rasp                  ; duration of buzz (I.E. If No Mem For Input)
ROM_0 5c39h pip                   ; duration of keyboard Click (Default 0)
ROM_0 5c3ah errnr                 ; error report number -1 (iy points to here)
ROM_0 5c3bh flags                 ; flags (bit 5=lastk is valid, bit 1=printer output)
ROM_0 5c3ch tv_flag               ; flag bits
ROM_0 5c3dh err_sp                ; pointer to top of stack for ret on error
ROM_0 5c3fh list_sp               ; pointer to return from auto list
ROM_0 5c41h mode                  ; keyword, extended, graphics or letter/caps
ROM_0 5c42h newppc                ; next line number of program
ROM_0 5c44h nsppc                 ; next statement offset (in next line)
ROM_0 5c45h ppc                   ; current line number of program
ROM_0 5c47h subppc                ; current statement offset (in current line)
ROM_0 5c48h bordcr                ; bits 5, 4, 3 = border colour
ROM_0 5c49h e_ppc                 ; program edit cursor line number
ROM_0 5c4bh vars                  ; pointer to first variable
ROM_0 5c4dh dest                  ; pointer to variable during assignment
ROM_0 5c4fh chans                 ; pointer to first channel area
ROM_0 5c51h curchl                ; pointer to current channel area
ROM_0 5c53h prog                  ; pointer to first line in program
ROM_0 5c55h nxtlin                ; pointer to next program line
ROM_0 5c57h datadd                ; pointer to just past last data item read
ROM_0 5c59h e_line                ; pointer to edit line
ROM_0 5c5bh k_cur                 ; pointer to cursor
ROM_0 5c5dh ch_add                ; pointer to next char
ROM_0 5c5fh x_ptr                 ; pointer to syntax error
ROM_0 5c61h worksp                ; pointer to workspace
ROM_0 5c63h stkbot                ; pointer to calculator stack base
ROM_0 5c65h stkend                ; pointer to topmost memory address used by Basic
ROM_0 5c67h breg                  ; byte used for B register of calculator
ROM_0 5c68h mem                   ; pointer to calculator memory
ROM_0 5c6ah flags2                ; bit flags
ROM_0 5c6bh df_sz                 ; lines in lower screen (default 2)
ROM_0 5c6ch s_top                 ; line number of top line of auto list
ROM_0 5c6eh oldppc                ; continuation line number
ROM_0 5c70h ospcc                 ; continuation statement number
ROM_0 5c71h flagx                 ; bit flags
ROM_0 5c72h strlen                ; string length during assignment
ROM_0 5c74h t_addr                ; pointer to next syntax table item
ROM_0 5c76h seed                  ; word used by random number routines
ROM_0 5c78h frames                ; frame counter low, med, high bytes
ROM_0 5c79h frames1               ; med byte of frame counter
ROM_0 5c7ah frames2               ; high byte of frame counter
ROM_0 5c7bh udg                   ; pointer to bit patterns for user defined graphics
ROM_0 5c7dh coords                ; PLOT x, y values
ROM_0 5c7fh p_posn                ; printer position (range 33-02)
ROM_0 5c80h pr_cc                 ; low byte of next address in printer buffer
ROM_0 5c81h unused                ; unused
ROM_0 5c82h echo_e                ; column, line for input buffer
ROM_0 5c84h df_cc                 ; next screen location for PRINT
ROM_0 5c86h dfccl                 ; next screen location for PRINT (lower screen)
ROM_0 5c88h s_posn                ; screen column (32-02), screen row (24-01)
ROM_0 5c8ah sposnl                ; screen column (32-02), screen row (24-01) (lower screen)
ROM_0 5c8ch scr_ct                ; remaining scroll count + 1 (0 is maximum)
ROM_0 5c8dh attr_p                ; screen colours
ROM_0 5c8eh mask_p                ; defines the transparent screen colours
ROM_0 5c8fh attr_t                ; temporary colours
ROM_0 5c90h mask_t                ; defines the transparent temporary screen colours
ROM_0 5c91h p_flag                ; bit flags
ROM_0 5c92h membot                ; scratchpad area for calculator routines
ROM_0 5cb0h nmiadd                ; pointer used by nmi routine at 0066
ROM_0 5cb2h ramtop                ; pointer to highest stack byte (value 3e)
ROM_0 5cb4h p_ramt                ; highest byte that passed RAM test